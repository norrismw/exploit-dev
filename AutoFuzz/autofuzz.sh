#/bin/bash
# this requires beep; apt-get install beep
# this should be run from a directory with the following sub structure
# .
# ├── auto-fuzz.sh
# ├── results
# ├── spikes
# │   └── TFTP-FUZZ.spk
# └── wireshark
# 3 directories, 2 files
# usage: ./auto-fuzz.sh TARGETIP TARGETPORT TCP/UDP INTERFACE
# example: ./auto-fuzz.sh 192.168.0.11 4567 TCP eth0

conn_timer() {
    for i in {1..10} ; do
        echo -n 'Next error check  :: ['
        for ((j=0; j<i; j++)) ; do echo -n ' '; done
        echo -n '=>'
        for ((j=i; j<10; j++)) ; do echo -n ' '; done
        echo -n "] $i"0% $'\r'
        sleep 0.2 
    done
}

conn_check() {
    COUNTER=0
    for i in {1..10} ; do
        if ! nc -z $TARGETIP $TARGETPORT; then ((COUNTER+=1)); fi
        sleep 0.1 
    done
    if [ $COUNTER = 10 ] ; then beep; kill $SPIKEJOB
    echo "Crashed           :: `date`" 
    echo "Exiting           :: $SPIKE"
    exit 0
    fi  
}

TARGETIP=$1
TARGETPORT=$2
TCPORUDP=$3
INTERFACE=$4
SPIKEARRAY=(`for f in spikes/*; do echo $f; done`)

for i in ${SPIKEARRAY[@]}; do
  SPIKE=`basename $i`
  echo "SPIKE file        :: $SPIKE" 2>&1 | tee results/$SPIKE-results.txt
  /usr/bin/wireshark -f "host $TARGETIP and tcp port $TARGETPORT" -i $INTERFACE -w wireshark/$SPIKE-wireshark.pcap -k 2> /dev/null &
  WIREJOB=$!
  sleep 5
  if [ $TCPORUDP == 'TCP' ]; then
    /usr/bin/generic_send_tcp $TARGETIP $TARGETPORT $i 0 0 >> results/$SPIKE-results.txt 2>&1 &
    fi
  if [ $TCPORUDP == 'UDP' ]; then
    /usr/bin/generic_send_udp $TARGETIP $TARGETPORT $i 0 0 5000 >> results/$SPIKE-results.txt 2>&1 &
    fi
  SPIKEJOB=$!
  echo "SPIKE job         :: $SPIKEJOB"
  echo "Started           :: `date`"
  while kill -0 $SPIKEJOB > /dev/null 2>&1; do
    conn_timer
    conn_check
  done
  kill $WIREJOB
  echo -n "Completed         :: `date`" $'\n'
done

